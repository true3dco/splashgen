<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ title }}</title>
    {% for favicon in favicons %}
    <link rel="{{favicon['rel']}}" type="{{favicon['type']}}" sizes="{{favicon['size']}}" href="{{favicon['filename']}}" />
    {% endfor %}
    <meta name="theme-color" content="{% if theme == 'dark' %}#1eaee0{% else %}#ffffff{% endif %}" />
    {% if meta %}
    <meta name="title" content="{{ meta.title }}" />
    <meta name="description" content="{{ meta.description }}" />

    <meta property="og:type" content="website" />
    <meta property="twitter:card" content="summary_large_image" />
    {% if meta.canonical_url %}
    <meta property="og:url" content="{{ meta.canonical_url }}" />
    <meta property="twitter:url" content="{{ meta.canonical_url }}" />
    {% endif %}

    <meta property="og:title" content="{{ meta.title }}" />
    <meta property="og:description" content="{{ meta.description }}" />
    <meta property="twitter:title" content="{{ meta.title }}" />
    <meta property="twitter:description" content="{{ meta.description }}" />

    {% if meta.image %}
    <meta property="og:image" content="{{ meta.image }}" />
    <meta property="twitter:image" content="{{ meta.image }}" />
    {% endif %} {% endif %}

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6"
      crossorigin="anonymous"
    />
    <style>
      html,
      body {
        height: 100%;
        {% if theme == "dark" %}
        background: var(--bs-dark);
        color: var(--bs-white);
        {% endif %}
      }

      {% if hero_image %}
      #hero-image-container {
        max-height: 40vh;
      }

    
      .signOutButton {
        float: "right";
      }


      @media screen and (max-height: 660px) {
        #hero-image-container {
          display: none;
        }
      }

      @media screen and (max-width: 768px) {
        #hero-image-container {
          display: none;
        }
      }
      {% endif %}
    </style>
    {% if enable_splashgen_analytics %}
    <script>(function(f,b){if(!b.__SV){var e,g,i,h;window.mixpanel=b;b._i=[];b.init=function(e,f,c){function g(a,d){var b=d.split(".");2==b.length&&(a=a[b[0]],d=b[1]);a[d]=function(){a.push([d].concat(Array.prototype.slice.call(arguments,0)))}}var a=b;"undefined"!==typeof c?a=b[c]=[]:c="mixpanel";a.people=a.people||[];a.toString=function(a){var d="mixpanel";"mixpanel"!==c&&(d+="."+c);a||(d+=" (stub)");return d};a.people.toString=function(){return a.toString(1)+".people (stub)"};i="disable time_event track track_pageview track_links track_forms track_with_groups add_group set_group remove_group register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking start_batch_senders people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.remove".split(" ");
      for(h=0;h<i.length;h++)g(a,i[h]);var j="set set_once union unset remove delete".split(" ");a.get_group=function(){function b(c){d[c]=function(){call2_args=arguments;call2=[c].concat(Array.prototype.slice.call(call2_args,0));a.push([e,call2])}}for(var d={},e=["get_group"].concat(Array.prototype.slice.call(arguments,0)),c=0;c<j.length;c++)b(j[c]);return d};b._i.push([e,f,c])};b.__SV=1.2;e=f.createElement("script");e.type="text/javascript";e.async=!0;e.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?
      MIXPANEL_CUSTOM_LIB_URL:"file:"===f.location.protocol&&"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";g=f.getElementsByTagName("script")[0];g.parentNode.insertBefore(e,g)}})(document,window.mixpanel||[]);
      mixpanel.init("de3f5d107b7d40401a23cb003a69a492", {
        batch_requests: true,
        ip: false,
        property_blacklist: ['$browser', '$browser_version', '$device', '$device_id', '$user_id', '$current_url', '$initial_referrer', '$initial_referring_domain', '$os', '$referrer', '$referring_domain', '$screen_height', '$screen_width', '$search_engine', 'mp_keyword', 'utm_source', 'utm_referrer', 'utm_campaign']
      });
    </script>
    <script>
      mixpanel.track('site', {'host': window.location.hostname});
    </script>
    {% endif %}

    <script>
    // This Script tag sends the github CODE to AWS 
    var url = new URL(window.location.href);
    var c = url.searchParams.get("code");
    console.log("JWT:" + localStorage.getItem("jwt_token"));
    if (c !== null) {        

      console.log(c);
      
      awsURL = "https://cxpme86mmi.execute-api.us-east-2.amazonaws.com/zenweb-github-access-token-manager";
      data = {code: c};
      fetch(awsURL, {
        method: "POST", 
        body: JSON.stringify(data),
      }).then(res => {
        return res.json();
      }).then(data=>{ 
        console.log(data); 
        localStorage.setItem("jwt_token", data.jwt_token);
        window.location = window.location.href.split("?")[0];

      });
    }
    </script>
    <script>
    // This script tag shows all of the repos that are already deployed
      if (localStorage.getItem("jwt_token")){

      }
    </script>
    

  </head>
  <body style="display: grid;">

    <div
      class="
        d-flex
        flex-column
        px-4
        py-lg-3
        min-vw-100
      "
    >
    <button id="homeButton" type="button" class="btn btn-outline-secondary"  style="width: 80px;"> HOME </button>
    <div></div>
    <div id="signOut" style="position: fixed; top: 16px; right: 16px;">
    </div>

    <script>
        var homeButton = document.getElementById("homeButton");
        homeButton.addEventListener ("click", function() {
          window.location = window.location.href.split("?")[0];
      });
    </script>
<script>
  if (localStorage.getItem("jwt_token")){
  var button = document.createElement("button");

  document.getElementById("signOut").appendChild(button);
  button.innerHTML = "LOG ME OUT";
  button.className += "signOutButton";
  button.addEventListener ("click", function() {
  localStorage.removeItem("jwt_token");
    window.location = window.location.href.split("?")[0];
    });
  }
  else{
    var signinLink = document.createElement("a");
    signinLink.href = "https://github.com/login/oauth/authorize?scope=user,repo&client_id=589a43a0032c52da65b4&redirect_uri=http://localhost:8000";
    signinLink.innerHTML =" LOG IN";
    signinLink.className += "signOutButton";
    
    document.getElementById("signOut").appendChild(signinLink);
  }
</script>
    
      {% if logo %}
      <img
        class="d-block mx-auto mb-4 remove-when-logged-in"
        src="{{ logo }}"
        alt=""
        width="56"
        height="56"
      />
      {% endif %}
      <div class="remove-when-logged-in">
        <h1 class="display-5 fw-bold remove-when-logged-in">
          {{ headline }}
        </h1>
      </div>
      <div class="col-lg-6 mx-auto remove-when-logged-in">
        <p
          class="lead remove-when-logged-in mb-4{% if theme == 'light' %} text-muted{% endif %}"
          {% if theme == "dark" %}style="color: rgba(255, 255, 255, 0.7)"{% endif %}
        >
          {{ subtext }}
        </p>
      </div>

      {% if call_to_action %}
      {{ call_to_action }}
      {% endif %}
      {% if hero_image %}
      <div class="container px-2 overflow-hidden" id="hero-image-container">
        <img
          src="{{ hero_image }}"
          class="img-fluid"
          alt="Image depicting the product"
          loading="lazy"
        />
      </div>
      {% endif %}
      <div id="DeployedAppsHolder" class="border border-primary"></div>
      <div id="DeployedAppOptions"></div>
      <div id="RepoHolder" class="border"></div>

      
      <script>
        if (localStorage.getItem("jwt_token")){
          var x = document.getElementsByClassName("remove-when-logged-in");
          
          for (let item of x) {
            item.remove();
              
          } 
          
        }
      </script>
      <script>
      if (localStorage.getItem("jwt_token")){
        document.getElementById("githubSignup").remove(); 
        }
      </script>
      <script> 
      // Show a deploy button
      var url = new URL(window.location.href);
      var repo = url.searchParams.get("repo");

      if (repo !== null && localStorage.getItem("jwt_token")) {        
        console.log("GOT REPO: ".concat( repo));
        var a = document.createElement('a');
        a.title = "deploy: ".concat(repo);
        a.href = window.location.href.split("?")[0] + "?deployed_repo="+ repo;
        var linkText = document.createTextNode(a.title);
        a.appendChild(linkText);

        h1 = document.createElement('h1');
        h1.innerHTML = "Make sure this repository has a splashgen app, when ready deploy!";
        const repoHolder = document.querySelector('#RepoHolder');
        repoHolder.appendChild(h1);
        repoHolder.appendChild(a);

      }
     </script>
      <script> 
      // The repo has been deployed
      var url = new URL(window.location.href);
      var deployed_repo = url.searchParams.get("deployed_repo");
      if (deployed_repo !== null && localStorage.getItem("jwt_token")) {        
          createWebhookURL = "https://cxpme86mmi.execute-api.us-east-2.amazonaws.com/zenweb-github-create-webhook";
          data = {jwt_token: localStorage.getItem("jwt_token"), repo: deployed_repo}
          fetch(createWebhookURL, {
            method: "POST", 
            body: JSON.stringify(data),
          }).then(res => {
            return res.text();
          }).then(data=>{ 
            console.log(data); 
            window.location = window.location.href.split("?")[0];
            //window.location = "?access=".concat(data.access_token).concat("&username=").concat(data.username);
          });
      }
     </script>
     <script> 
      // This Script tag is responsible for getting a list of repos associated with a users personal account 
        var url = new URL(window.location.href);
        var repo = url.searchParams.get("repo");
        var selected_app = url.searchParams.get("deployed_app_info");
        var code = url.searchParams.get("code");


        if (localStorage.getItem("jwt_token") && repo === null && selected_app === null && code=== null) {    
          const repoHolder = document.querySelector('#RepoHolder');
          repoHolder.innerHTML = "Choose a Repository to deploy a new splashgen site";

          data = {jwt_token: localStorage.getItem("jwt_token")};
          lambdaGetReposURL = "https://cxpme86mmi.execute-api.us-east-2.amazonaws.com/repos";
          fetch(lambdaGetReposURL, {
            method: "POST", 
            body:JSON.stringify(data)
            
          }).then(res => {
            return res.json();
          }).then(data=>{ 
            console.log(data); 
            var i = 0;
            try{
              data.forEach((dict) => 
              {
                if (i >= 6) {
                  throw BreakException;
                }
                console.log(dict);
                let li = document.createElement('li');
                  repoHolder.appendChild(li);

                  var a = document.createElement('a');
                  var linkText = document.createTextNode(dict.full_name);
                  a.appendChild(linkText);
                  a.title = dict.full_name;
                  a.href = window.location.href.split("?")[0] + "?repo=" + dict.full_name;
                  li.appendChild(a);
                  i ++;
              });
            }
            catch (e) {
              
          }});

        }
    </script>
 <script> 
      // This Script tag is responsible for getting a list of deployed apps 
 
        var url = new URL(window.location.href);
        var repo = url.searchParams.get("repo");
                var code = url.searchParams.get("code");

        var selected_app = url.searchParams.get("deployed_app_info");
        if (localStorage.getItem("jwt_token") && selected_app === null && repo === null && code === null) {    
          const deployedAppsHolder = document.querySelector('#DeployedAppsHolder');
          deployedAppsHolder.innerHTML = "Deployed Apps";

          data = {jwt_token: localStorage.getItem("jwt_token")};
          lambdaGetReposURL = "https://cxpme86mmi.execute-api.us-east-2.amazonaws.com/apps";
          fetch(lambdaGetReposURL, {
            method: "POST", 
            body:JSON.stringify(data)
            
          }).then(res => {
            return res.json();
          }).then(data=>{ 
            console.log(data); 
            var i = 0;
    
              data.forEach((repo) => 
              {
                console.log(repo);
                let li = document.createElement('li');
                  deployedAppsHolder.appendChild(li);

                  var a = document.createElement('a');
                  var linkText = document.createTextNode(repo);
                  a.appendChild(linkText);
                  a.title = repo;
                  a.href = window.location.href.split("?")[0] + "?deployed_app_info=" + repo;
                  li.appendChild(a);
                  i ++;
              }); 
           });
        }
    </script>

    <script>
      var url = new URL(window.location.href);
      var c = url.searchParams.get("deployed_app_info");
      if (c !== null) {
          var header = document.createElement("h1");
          header.innerHTML = "Selected Repo: "  + c;
          var a = document.createElement("a");
          a.title=c;
          a.innerHTML ="SEE IT LIVE";
          a.target="_blank"
          a.href = "https://api.torbjorn.xyz/" + c + "/";
          var optionsHeader = document.createElement("h2");
          optionsHeader.innerHTML = "Options";
          var button = document.createElement("button");
          button.innerHTML = "Delete";
          document.getElementById("DeployedAppOptions").appendChild(header);
          document.getElementById("DeployedAppOptions").appendChild(a);
          document.getElementById("DeployedAppOptions").appendChild(optionsHeader);
          document.getElementById("DeployedAppOptions").appendChild(button);

          
          
          // DELETE REPO
          button.addEventListener ("click", function() {
            lambdaDeleteReposURL = "https://cxpme86mmi.execute-api.us-east-2.amazonaws.com/delete_apps";
            data = {jwt_token: localStorage.getItem("jwt_token"), repo: c}

            fetch(lambdaDeleteReposURL, {
              method: "POST", 
              body:JSON.stringify(data)
              
            }).then(res => {
              return res.json();
            }).then(data=>{ 
              console.log(data); 
              window.location = window.location.href.split("?")[0];
            });
          });
      }
    </script>
    </div>
  </body>
</html>
